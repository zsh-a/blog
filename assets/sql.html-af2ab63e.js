import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-6f6f0afa.js";const t={},o=e(`<h2 id="sql-query" tabindex="-1"><a class="header-anchor" href="#sql-query" aria-hidden="true">#</a> SQL query</h2><ol><li>Generate a Cartesian product of the relations listed in the from clause.</li><li>Apply the predicates specified in the where clause on the result of Step 1.</li><li>For each tuple in the result of Step 2, output the attributes (or results of expressions) specified in the select clause.</li></ol><h3 id="the-rename-operation" tabindex="-1"><a class="header-anchor" href="#the-rename-operation" aria-hidden="true">#</a> The Rename Operation</h3><p>result column rename</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">as</span> instructor_name<span class="token punctuation">,</span> course_id
<span class="token keyword">from</span> instructor<span class="token punctuation">,</span> teaches
<span class="token keyword">where</span> instructor<span class="token punctuation">.</span>ID<span class="token operator">=</span> teaches<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>we wish to compare tuples in the same relation.</p><p>Find the names of all instructor whose salary is greater than at least one instructor in the <strong>Biology</strong> department.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> T<span class="token punctuation">.</span>name
<span class="token keyword">from</span> instructor <span class="token keyword">as</span> T<span class="token punctuation">,</span> instructor <span class="token keyword">as</span> S
<span class="token keyword">where</span> T<span class="token punctuation">.</span>salary <span class="token operator">&gt;</span> S<span class="token punctuation">.</span>salary <span class="token operator">and</span> S<span class="token punctuation">.</span>dept_name<span class="token operator">=</span><span class="token string">&#39;Biology&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="basic-string-operations" tabindex="-1"><a class="header-anchor" href="#basic-string-operations" aria-hidden="true">#</a> Basic String Operations</h3><p>String concatenation (using <code>||</code>)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token string">&#39;hello&#39;</span> <span class="token operator">||</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>upper(s)</code>,<code>lower(s)</code>,<code>trim(s)</code></p><h4 id="pattern-matching" tabindex="-1"><a class="header-anchor" href="#pattern-matching" aria-hidden="true">#</a> Pattern matching</h4><ul><li><code>%</code> matches any substring.</li><li><code>_</code> matches any character.</li></ul><p>Using <code>like</code> expresses pattern</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> dept
name
<span class="token keyword">from</span> department
<span class="token keyword">where</span> building <span class="token operator">like</span> <span class="token string">&#39;%Watson%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>using <code>escape</code> define escape character</p><ul><li><code>like &#39;ab∖%cd%&#39; escape &#39;∖&#39;</code> matches all strings beginning with &quot;ab%cd&quot;.</li><li><code>like &#39;ab∖∖cd%&#39; escape &#39;∖&#39;</code> matches all strings beginning with &quot;ab∖cd&quot;.</li><li></li></ul><h4 id="attribute-specification-in-the-select-clause" tabindex="-1"><a class="header-anchor" href="#attribute-specification-in-the-select-clause" aria-hidden="true">#</a> Attribute Specification in the Select Clause</h4><p>using <code>*</code> int the <strong>select</strong> to denote &quot;all attributes&quot;</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> instructor<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">from</span> instructor<span class="token punctuation">,</span> teaches
<span class="token keyword">where</span> instructor<span class="token punctuation">.</span>ID<span class="token operator">=</span> teaches<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ordering-the-display-of-tuples" tabindex="-1"><a class="header-anchor" href="#ordering-the-display-of-tuples" aria-hidden="true">#</a> Ordering the Display of Tuples</h4><p>The <strong>order by</strong> clause causes the tuples in the result of a query to appear in sorted<br> order.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> instructor
<span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span><span class="token punctuation">,</span> name <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>using the notation (v1, v2, … , vn) denote a tuple of arity n containing values v1, v2, … , vn;</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span> course_id
<span class="token keyword">from</span> instructor<span class="token punctuation">,</span> teaches
<span class="token keyword">where</span> <span class="token punctuation">(</span>instructor<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> dept_name<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>teaches<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">&#39;Biology&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-operations" tabindex="-1"><a class="header-anchor" href="#set-operations" aria-hidden="true">#</a> Set Operations</h3><ul><li>The set of all courses taught in the Fall 2017 semester:</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Fall&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2017</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The set of all courses taught in the Spring 2018 semester:</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Spring&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="union" tabindex="-1"><a class="header-anchor" href="#union" aria-hidden="true">#</a> Union</h4><p>Finding the set of all courses taught either in Fall 2017 or in Spring 2018, or both.</p><p><code>union</code> elimates duplicates, <code>union all</code> retain duplicates.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Fall&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2017</span><span class="token punctuation">)</span>
<span class="token keyword">union</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Spring&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="intersect" tabindex="-1"><a class="header-anchor" href="#intersect" aria-hidden="true">#</a> Intersect</h4><p>Finding the set of all courses taught in both the Fall 2017 and Spring 2018.<br><code>intersect</code> elimates duplicates, <code>intersect all</code> retain duplicates.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Fall&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2017</span><span class="token punctuation">)</span>
<span class="token keyword">intersect</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Spring&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="except" tabindex="-1"><a class="header-anchor" href="#except" aria-hidden="true">#</a> Except</h4><p>Finding all courses taught in the Fall 2017 semester but not in the Spring 2018 semester</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Fall&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2017</span><span class="token punctuation">)</span>
<span class="token keyword">except</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">&#39;Spring&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aggregate-functions" tabindex="-1"><a class="header-anchor" href="#aggregate-functions" aria-hidden="true">#</a> Aggregate Functions</h3><ul><li>Average: <code>avg</code></li><li>Minimum: <code>min</code></li><li>Maximum: <code>max</code></li><li>Total: <code>sum</code></li><li>Count: <code>count</code></li></ul><h4 id="aggregation-with-grouping" tabindex="-1"><a class="header-anchor" href="#aggregation-with-grouping" aria-hidden="true">#</a> Aggregation with Grouping</h4><ul><li>The attribute or attributes given in the group by clause are used to form groups.</li></ul><p>Find the average salary in each department.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span> <span class="token function">avg</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_salary
<span class="token keyword">from</span> instructor
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="the-having-clause" tabindex="-1"><a class="header-anchor" href="#the-having-clause" aria-hidden="true">#</a> The Having Clause</h4><p>a condition that applies to groups rather than to tuples.</p><p>Finding those departments where the average salary of the instructors is more than $42,000.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_salary
<span class="token keyword">from</span> salary
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_name
<span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">42000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nested-subqueries" tabindex="-1"><a class="header-anchor" href="#nested-subqueries" aria-hidden="true">#</a> Nested Subqueries</h3><h4 id="set-membership" tabindex="-1"><a class="header-anchor" href="#set-membership" aria-hidden="true">#</a> Set Membership</h4><p><code>in</code> or <code>not in</code> test for set membership</p><p>Find those courses that were taught in the Fall 2017 and that appear in the set of courses obtained in the subquery.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester<span class="token operator">=</span><span class="token string">&#39;Fall&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span><span class="token number">2017</span> <span class="token operator">and</span> 
course_id <span class="token operator">in</span> 
<span class="token punctuation">(</span><span class="token keyword">select</span> course_id
<span class="token keyword">from</span> section
<span class="token keyword">where</span> semester<span class="token operator">=</span><span class="token string">&#39;Spring&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span><span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>in</code> and <code>not in</code> can be used on enumerated sets</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> name
<span class="token keyword">from</span> instructor
<span class="token keyword">where</span> name <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;Mozart&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Einstein&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set-comparison" tabindex="-1"><a class="header-anchor" href="#set-comparison" aria-hidden="true">#</a> Set Comparison</h4><p>Find the names of all instructors whose salary is greater than at least one instructor in the Biology department.</p><p><code>some</code> means at least one</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name 
<span class="token keyword">from</span> instuctor
<span class="token keyword">where</span> salary <span class="token operator">&gt;</span> 
<span class="token keyword">some</span><span class="token punctuation">(</span><span class="token keyword">select</span> salary
<span class="token keyword">from</span> instructor
<span class="token keyword">where</span> dept_name<span class="token operator">=</span><span class="token string">&#39;Biology&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="subqueries-in-the-from-clause" tabindex="-1"><a class="header-anchor" href="#subqueries-in-the-from-clause" aria-hidden="true">#</a> Subqueries in the From Clause</h4><p>Find the average instructors’ salaries of those departments<br> where the average salary is greater than $42,000.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span> avg
salary
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span> <span class="token function">avg</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_salary
<span class="token keyword">from</span> instructor
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_name<span class="token punctuation">)</span>
<span class="token keyword">where</span> avg_salary <span class="token operator">&gt;</span> <span class="token number">42000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Find the maximum across all departments<br> of the total of all instructors’ salaries in each department.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>tot_salary<span class="token punctuation">)</span>
<span class="token keyword">from</span> 
<span class="token punctuation">(</span><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
<span class="token keyword">from</span> instructor
<span class="token keyword">group</span> <span class="token keyword">by</span> dept_name<span class="token punctuation">)</span> <span class="token keyword">as</span> dept_total<span class="token punctuation">(</span>dept_name<span class="token punctuation">,</span>tot_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="intermediate-sql" tabindex="-1"><a class="header-anchor" href="#intermediate-sql" aria-hidden="true">#</a> Intermediate SQL</h2><h3 id="join-expressions" tabindex="-1"><a class="header-anchor" href="#join-expressions" aria-hidden="true">#</a> Join Expressions</h3><h4 id="the-natural-join" tabindex="-1"><a class="header-anchor" href="#the-natural-join" aria-hidden="true">#</a> The Natural Join</h4><p>The <code>natural join</code> operation, unlike Cartesian product of two relations, only considers those pairs of tuples with the same value on those attributes that appear in the schemas of both relations.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span> course_id
<span class="token keyword">from</span> student<span class="token punctuation">,</span> takes
<span class="token keyword">where</span> student<span class="token punctuation">.</span>ID <span class="token operator">=</span> takes<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>equals</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span> course_id
<span class="token keyword">from</span> student <span class="token keyword">natural</span> <span class="token keyword">join</span> takes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>because two relations have the same attribute <strong>ID</strong></p><p>The operation <code>join … using</code> requires a list of attribute to be specified. All attributes must have the same value.</p><p>List the names of students along with the titles of courses that they have taken.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span>title
<span class="token keyword">from</span> student <span class="token keyword">natural</span> <span class="token keyword">join</span> tasks<span class="token punctuation">,</span>course
<span class="token keyword">where</span> tasks<span class="token punctuation">.</span>course_id <span class="token operator">=</span><span class="token operator">=</span> course<span class="token punctuation">.</span>course_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>note that <code>tasks.course_id</code> from the result of natural join and <code>course_id</code> is from tasks.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span>title
<span class="token keyword">from</span> <span class="token punctuation">(</span>student <span class="token keyword">natural</span> <span class="token keyword">join</span> tasks<span class="token punctuation">)</span> <span class="token keyword">join</span> course <span class="token keyword">using</span><span class="token punctuation">(</span>course_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="join-conditions" tabindex="-1"><a class="header-anchor" href="#join-conditions" aria-hidden="true">#</a> Join Conditions</h4><p>The <code>on</code> condation allows a general predicate over the relation being joined.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> student<span class="token punctuation">.</span>ID <span class="token keyword">as</span> ID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> dept_name<span class="token punctuation">,</span> tot_cred<span class="token punctuation">,</span>
    course_id<span class="token punctuation">,</span> sec_id<span class="token punctuation">,</span> semester<span class="token punctuation">,</span> <span class="token keyword">year</span><span class="token punctuation">,</span> grade
<span class="token keyword">from</span> student <span class="token keyword">join</span> takes <span class="token keyword">on</span> student<span class="token punctuation">.</span>ID <span class="token operator">=</span> takes<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="outer-joins" tabindex="-1"><a class="header-anchor" href="#outer-joins" aria-hidden="true">#</a> Outer Joins</h4><p>The <strong>out-join</strong> preserve some tuples missed in join.</p><ul><li><code>left outer join</code> preserve tuples only in the named before (to the left) <strong>left outer join</strong> operation.</li><li><code>right outer join</code> preserve tuples only in the named after (to the right) <strong>right outer join</strong> operation.</li><li>The <code>full outer join</code> preserves tuples in both relations.</li></ul><p>That do not preserve nonmatched tuples are called <strong>inner join</strong>.</p><p>outer join operation</p><ol><li>compute inner join</li><li>for every tuples in the left relation that do not match any tuple in the right relation in the inner join, add a tuple with null of right attributes to the result</li></ol><p>Find all students who have not taken a course.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> ID
<span class="token keyword">from</span> student <span class="token keyword">natural</span> <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> tasks
<span class="token keyword">where</span> course_id <span class="token operator">=</span><span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Display<br> a list of all students in the Comp. Sci. department, along with the course sections, if<br> any, that they have taken in Spring 2017; all course sections from Spring 2017 must be displayed, even if no student from the Comp. Sci. department has taken the course<br> section.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> 
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> dept_name <span class="token operator">=</span><span class="token operator">=</span> <span class="token string">&#39;Comp.Sci.&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">natural</span> <span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> 
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tasks <span class="token keyword">where</span> semester <span class="token operator">=</span><span class="token operator">=</span> <span class="token string">&#39;Spring&#39;</span> <span class="token operator">and</span> <span class="token keyword">year</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">2017</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,93),p=[o];function i(l,r){return n(),a("div",null,p)}const u=s(t,[["render",i],["__file","sql.html.vue"]]);export{u as default};
