import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as r,a as e,b as a,d,f as i}from"./app-6f6f0afa.js";const c="/blog/image/PE/checkout_master.png",l={},h=i('<h2 id="the-three-states" tabindex="-1"><a class="header-anchor" href="#the-three-states" aria-hidden="true">#</a> The Three States</h2><ul><li><strong>Modified</strong> : have changed the file but not commited to the database.</li><li><strong>Staged</strong> : have marked a modifed file in its current to be your next commit snapshot</li><li><strong>Committed</strong> : the data have been stored in local database</li></ul><h2 id="viewing-your-staged-and-unstaged-changes" tabindex="-1"><a class="header-anchor" href="#viewing-your-staged-and-unstaged-changes" aria-hidden="true">#</a> Viewing Your Staged and Unstaged Changes</h2><ul><li><code>git diff</code> : compares what is in your working directory with what is in your staging area.</li><li><code>git diff --staged</code> : compares your staged changes to your last commit</li></ul><h2 id="removing-files" tabindex="-1"><a class="header-anchor" href="#removing-files" aria-hidden="true">#</a> Removing Files</h2>',5),g=e("code",null,"git rm PROJECTS.md",-1),u={href:"http://PROJECTS.md",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,[e("p",null,[e("code",null,"git rm --cached README"),a(" : keep the file on your hard drive but not have Git track it anymore.")])],-1),p=i(`<h2 id="moving-files" tabindex="-1"><a class="header-anchor" href="#moving-files" aria-hidden="true">#</a> Moving Files</h2><p><code>$ git mv file_from file_to</code> is equivalent to running something like this:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mv</span> README.md README
$ <span class="token function">git</span> <span class="token function">rm</span> README.md
$ <span class="token function">git</span> <span class="token function">add</span> README
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="undoing-things" tabindex="-1"><a class="header-anchor" href="#undoing-things" aria-hidden="true">#</a> Undoing Things</h2><p>when you commit early and forget to add some files, redo that commit, stage changes, and commit again using <code>--amend</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>the second commit will replace the first.</p><h2 id="unstaging-a-staged-file" tabindex="-1"><a class="header-anchor" href="#unstaging-a-staged-file" aria-hidden="true">#</a> Unstaging a Staged File</h2><ul><li><code>git restore --staged</code> : unstage a staged file</li><li><code>git restore </code> : unmodifying a modified file with git restore</li></ul><h1 id="git-branching" tabindex="-1"><a class="header-anchor" href="#git-branching" aria-hidden="true">#</a> Git Branching</h1><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>branch : a pointer to these commited metadata</p></li><li><p>HEAD point to current branch</p></li><li><p><code>git checkout</code> switch branch</p></li><li><p><code>git branch -d </code> delete branch</p></li><li><p>rename a branch<br><code>$ git branch --move bad-branch-name corrected-branch-name</code><br> push to remote<br><code>$ git push --set-upstream origin corrected-branch-name</code></p></li></ul>',12);function f(b,v){const n=s("ExternalLinkIcon");return o(),r("div",null,[h,e("ul",null,[e("li",null,[e("p",null,[g,a(' : untrack "'),e("a",u,[a("PROJECTS.md"),d(n)]),a('"')])]),m]),p])}const E=t(l,[["render",f],["__file","git.html.vue"]]);export{E as default};
