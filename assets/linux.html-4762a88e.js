import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-6f6f0afa.js";const e={},p=t(`<h1 id="interaction-with-the-execution-environment" tabindex="-1"><a class="header-anchor" href="#interaction-with-the-execution-environment" aria-hidden="true">#</a> Interaction With the Execution environment</h1><h2 id="using-getopt-long" tabindex="-1"><a class="header-anchor" href="#using-getopt-long" aria-hidden="true">#</a> Using getopt_long</h2><p><code>#include &lt;getopt.h&gt;</code><br> for example:<br><code>$ program -h -v -o name</code></p><p><code>const char* const short_options = &quot;ho:v&quot;;</code><br><code>:</code>indicate a argument followed</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">option</span> long_options<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// long option,has argument,NULL,short option</span>
	<span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token char">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token string">&quot;verbose&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span>
    <span class="token comment">// ended with 0</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;getopt.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token comment">/* The name of this program. */</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> program_name<span class="token punctuation">;</span>
<span class="token comment">/* Prints usage information for this program to STREAM (typically
stdout or stderr), and exit the program with EXIT_CODE. Does not
return. */</span>
<span class="token keyword">void</span> <span class="token function">print_usage</span> <span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">int</span> exit_code<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">fprintf</span> <span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;Usage: %s options [ inputfile ... ]\\n&quot;</span><span class="token punctuation">,</span> program_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span> <span class="token punctuation">(</span>stream<span class="token punctuation">,</span>
    <span class="token string">&quot; -h --help Display this usage information.\\n&quot;</span>
    <span class="token string">&quot; -o --output filename Write output to file.\\n&quot;</span>
    <span class="token string">&quot; -v --verbose Print verbose messages.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span> <span class="token punctuation">(</span>exit_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* Main program entry point. ARGC contains number of argument list
elements; ARGV is an array of pointers to them. */</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> next_option<span class="token punctuation">;</span>
    <span class="token comment">/* A string listing valid short options letters. */</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> short_options <span class="token operator">=</span> <span class="token string">&quot;ho:v&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">/* An array describing valid long options. */</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">option</span> long_options<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    	<span class="token comment">// long option,has argument,NULL,short option</span>
		<span class="token punctuation">{</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token char">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token string">&quot;verbose&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token char">&#39;v&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// ended with 0</span>

    <span class="token comment">/* The name of the file to receive program output, or NULL for
    standard output. */</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> output_filename <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">/* Whether to display verbose messages. */</span>
    <span class="token keyword">int</span> verbose <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* Remember the name of the program, to incorporate in messages.
    The name is stored in argv[0]. */</span>
    program_name <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        next_option <span class="token operator">=</span> <span class="token function">getopt_long</span> <span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> short_options<span class="token punctuation">,</span>
        long_options<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>next_option<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;h&#39;</span><span class="token operator">:</span> <span class="token comment">/* -h or --help */</span>
            <span class="token comment">/* User has requested usage information. Print it to standard
            output, and exit with exit code zero (normal termination). */</span>
            <span class="token function">print_usage</span> <span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;o&#39;</span><span class="token operator">:</span> <span class="token comment">/* -o or --output */</span>
            <span class="token comment">/* This option takes an argument, the name of the output file. */</span>
            output_filename <span class="token operator">=</span> optarg<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;v&#39;</span><span class="token operator">:</span> <span class="token comment">/* -v or --verbose */</span>
            verbose <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;?&#39;</span><span class="token operator">:</span> <span class="token comment">/* The user specified an invalid option. */</span>
            <span class="token comment">/* Print usage information to standard error, and exit with exit
            code one (indicating abnormal termination). */</span>
            <span class="token function">print_usage</span> <span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token comment">/* Done with options. */</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">/* Something else: unexpected. */</span>
            <span class="token function">abort</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>next_option <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Done with options. OPTIND points to first nonoption argument.
    For demonstration purposes, print them if the verbose option was
    specified. */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="standard-i-o" tabindex="-1"><a class="header-anchor" href="#standard-i-o" aria-hidden="true">#</a> Standard I/O</h2><ul><li><code>stdin</code></li><li><code>stdout</code> default line buffered</li><li><code>stderr</code> default no buffered</li></ul><p><code>fprint(stderr,msg)</code></p><p><code>$ program &gt; output_file.txt 2&gt;&amp;1</code><br><code>$ program 2&gt;&amp;1 | filter</code><br><code>2&gt;&amp;1</code> indicate fd <strong>2</strong>(<code>stderr</code>) merged into fd <strong>1</strong>(<code>stdout</code>)</p><h2 id="the-environment" tabindex="-1"><a class="header-anchor" href="#the-environment" aria-hidden="true">#</a> The Environment</h2><ul><li>access environment variable value using <code>$varname</code>.<br><code>$ echo $HOME</code><br><code>$ echo $PATH</code></li><li>export variable<br><code>$ export HOME=&quot;/bin&quot;</code></li><li>functions in <code>&lt;stdlib.h&gt;</code><br><code>char *getenv (const char *__name)</code><br><code>int setenv (const char *__name, const char *__value, int __replace)</code></li></ul><h1 id="ipc" tabindex="-1"><a class="header-anchor" href="#ipc" aria-hidden="true">#</a> IPC</h1><h2 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe" aria-hidden="true">#</a> Pipe</h2><p><code>pipe(int* fds)</code> create a pipe, fds[0] is read end, dfs[1] is write end.<br><code>int dup2(int oldfd, int newfd)</code>, newfd equated file with oldfd</p><h3 id="pipe-redirect" tabindex="-1"><a class="header-anchor" href="#pipe-redirect" aria-hidden="true">#</a> pipe redirect</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
    <span class="token function">pipe</span><span class="token punctuation">(</span>fds<span class="token punctuation">)</span><span class="token punctuation">;</span>

    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// child</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>fds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// read from \`stdin\` as same as pipe</span>
        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        FILE<span class="token operator">*</span> stream <span class="token operator">=</span> <span class="token function">fdopen</span><span class="token punctuation">(</span>fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">&quot;This is a test.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">&quot;This is a test.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">&quot;Hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">&quot;My dog\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">&quot;This prog\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">&quot;One fish.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fflush</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><h3 id="local-sockets" tabindex="-1"><a class="header-anchor" href="#local-sockets" aria-hidden="true">#</a> Local Sockets</h3><p>server.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token comment">/* Read text from the socket and print it out. Continue until the
socket closes. Return nonzero if the client sent a “quit”
message, zero otherwise. */</span>
<span class="token keyword">int</span> <span class="token function">server</span> <span class="token punctuation">(</span><span class="token keyword">int</span> client_socket<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> length<span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token operator">*</span> text<span class="token punctuation">;</span>
        <span class="token comment">/* First, read the length of the text message from the socket. If
        read returns zero, the client closed the connection. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span> <span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> <span class="token operator">&amp;</span>length<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">/* Allocate a buffer to hold the text. */</span>
        text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Read the text itself, and print it. */</span>
        <span class="token function">read</span> <span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span> text<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span> <span class="token punctuation">(</span>“<span class="token operator">%</span>s\\n”<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Free the buffer. */</span>
        <span class="token function">free</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* If the client sent the message “quit,” we’re all done. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> “quit”<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> socket_name <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> client_sent_quit_message<span class="token punctuation">;</span>
    <span class="token comment">/* Create the socket. */</span>
    socket_fd <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \`PF_LOCAL\` local namespace</span>
    <span class="token comment">/* Indicate that this is a server. */</span>
    name<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
    <span class="token function">strcpy</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> socket_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bind</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token function">SUN_LEN</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Listen for connections. */</span>
    <span class="token function">listen</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Repeatedly accept connections, spinning off one server() to deal
    with each client. Continue until a client sends a “quit” message. */</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> client_name<span class="token punctuation">;</span>
        <span class="token class-name">socklen_t</span> client_name_len<span class="token punctuation">;</span>
        <span class="token keyword">int</span> client_socket_fd<span class="token punctuation">;</span>
        <span class="token comment">/* Accept a connection. */</span>
        client_socket_fd <span class="token operator">=</span> <span class="token function">accept</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_name_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Handle the connection. */</span>
        client_sent_quit_message <span class="token operator">=</span> <span class="token function">server</span> <span class="token punctuation">(</span>client_socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Close our end of the connection. */</span>
        <span class="token function">close</span> <span class="token punctuation">(</span>client_socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>client_sent_quit_message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Remove the socket file. */</span>
    <span class="token function">close</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unlink</span> <span class="token punctuation">(</span>socket_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>client.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/un.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">write_text</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socket_fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> text<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Write the number of bytes in the string, including
    NUL-termination. */</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">write</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>length<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Write the string. */</span>
    <span class="token function">write</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> text<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> socket_name <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> message <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> name<span class="token punctuation">;</span>
    <span class="token comment">/* Create the socket. */</span>
    socket_fd <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_LOCAL<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Store the server’s name in the socket address. */</span>
    name<span class="token punctuation">.</span>sun_family <span class="token operator">=</span> AF_LOCAL<span class="token punctuation">;</span>
    <span class="token function">strcpy</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>sun_path<span class="token punctuation">,</span> socket_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Connect the socket. */</span>
    <span class="token function">connect</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token function">SUN_LEN</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Write the text on the command line to the socket. */</span>
    <span class="token function">write_text</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="internet-domain-sockets" tabindex="-1"><a class="header-anchor" href="#internet-domain-sockets" aria-hidden="true">#</a> Internet-Domain Sockets</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token comment">/* Print the contents of the home page for the server’s socket.
Return an indication of success. */</span>
<span class="token keyword">void</span> <span class="token function">get_home_page</span> <span class="token punctuation">(</span><span class="token keyword">int</span> socket_fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">ssize_t</span> number_characters_read<span class="token punctuation">;</span>
    <span class="token comment">/* Send the HTTP GET command for the home page. */</span>
    <span class="token function">sprintf</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> “GET <span class="token operator">/</span>\\n”<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Read from the socket. The call to read may not
    return all the data at one time, so keep
    trying until we run out. */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        number_characters_read <span class="token operator">=</span> <span class="token function">read</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>number_characters_read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">/* Write the data to standard output. */</span>
        <span class="token function">fwrite</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> number_characters_read<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> socket_fd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> name<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">hostent</span><span class="token operator">*</span> hostinfo<span class="token punctuation">;</span>
    <span class="token comment">/* Create the socket. */</span>
    socket_fd <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Store the server’s name in the socket address. */</span>
    name<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    <span class="token comment">/* Convert from strings to numbers. */</span>
    hostinfo <span class="token operator">=</span> <span class="token function">gethostbyname</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hostinfo <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    name<span class="token punctuation">.</span>sin_addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token operator">*</span><span class="token punctuation">)</span> hostinfo<span class="token operator">-&gt;</span>h_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Web servers use port 80. */</span>
    name<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Connect to the Web server */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span> <span class="token punctuation">(</span>“connect”<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* Retrieve the server’s home page. */</span>
    <span class="token function">get_home_page</span> <span class="token punctuation">(</span>socket_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="system-call" tabindex="-1"><a class="header-anchor" href="#system-call" aria-hidden="true">#</a> System Call</h1><h2 id="using-strace" tabindex="-1"><a class="header-anchor" href="#using-strace" aria-hidden="true">#</a> Using strace</h2><p><code>sudo apt install strace</code></p>`,28),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","linux.html.vue"]]);export{k as default};
