import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,a as n,b as o,f as s}from"./app-6f6f0afa.js";const e="/blog/image/reg.png",c={},l=s('<h2 id="regex-to-nfa" tabindex="-1"><a class="header-anchor" href="#regex-to-nfa" aria-hidden="true">#</a> Regex to NFA</h2><h3 id="thompson-s-algorithm" tabindex="-1"><a class="header-anchor" href="#thompson-s-algorithm" aria-hidden="true">#</a> Thompson&#39;s Algorithm</h3><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Using the above basic elements, we can construct NFA recursively.</p><h3 id="data-struct" tabindex="-1"><a class="header-anchor" href="#data-struct" aria-hidden="true">#</a> Data Struct</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">NFA_Node</span><span class="token punctuation">{</span>

    NFA_Node<span class="token operator">*</span> next_edge1_<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">*</span>next_edge2_<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// every node only have at most two edge in Thompson&#39;s Algorithm</span>

    <span class="token comment">// </span>
    <span class="token keyword">char</span> value_<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 1 : accepted state</span>
    <span class="token comment">// 0 : non-accepted state</span>
    <span class="token comment">// State state_{}; </span>
    <span class="token keyword">int</span> id_ <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>NFA_Node<span class="token operator">*</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">NFA</span><span class="token punctuation">{</span>
    NFA_Node<span class="token operator">*</span> start_<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">*</span>end_<span class="token punctuation">{</span><span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// NFA(NFA_Node* start,NFA_Node* end):start_(start),end_(end){}</span>
    <span class="token function">NFA</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">concat</span><span class="token punctuation">(</span>NFA<span class="token operator">*</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">un</span><span class="token punctuation">(</span>NFA<span class="token operator">*</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="implement" tabindex="-1"><a class="header-anchor" href="#implement" aria-hidden="true">#</a> Implement</h3><p>evaluating a arithmetic expressions:</p><p>using a operator number stack and a operand stack.</p><ol><li>if it&#39;s a number, push it on stack</li><li>if it&#39;s a oprand <ul><li>it&#39;s <code>(</code> : push on the stack</li><li>it&#39;s <code>)</code> : pop and evaluate until <code>(</code></li><li>if the priority of oprand in the top of stack greater than the current oprand, pop and evalation until current priority greater that the top&#39;s of stack then push it on stack</li></ul></li><li>pop and evaluate the reminder elements in stack</li></ol><p>evaluating a regex expression is similar to evaluating arithmetic expressions. The difference is that the star operation only pops one element from the stack. Additionally, the concatenation operation is not denoted by any symbol, so we would have to detect it. We insert <code>.</code> into regex to represent concatenation operation.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> isOperand <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> ch <span class="token operator">!=</span> <span class="token char">&#39;(&#39;</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">!=</span> <span class="token char">&#39;|&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


string s<span class="token punctuation">;</span>
<span class="token keyword">int</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> reg<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    s <span class="token operator">+=</span> reg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> next <span class="token operator">=</span> reg<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOperand</span><span class="token punctuation">(</span>reg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> next <span class="token operator">!=</span> <span class="token char">&#39;|&#39;</span> <span class="token operator">&amp;&amp;</span> next <span class="token operator">!=</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> next <span class="token operator">!=</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        s <span class="token operator">+=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
s <span class="token operator">+=</span> reg<span class="token punctuation">[</span>reg<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nfa-to-dfa" tabindex="-1"><a class="header-anchor" href="#nfa-to-dfa" aria-hidden="true">#</a> NFA to DFA</h2><h3 id="data-struct-1" tabindex="-1"><a class="header-anchor" href="#data-struct-1" aria-hidden="true">#</a> Data Struct</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">DFA_Node</span><span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">State</span><span class="token punctuation">{</span>
        ACCEPT<span class="token punctuation">,</span>NON_ACCEPT
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id_ <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    State state_<span class="token punctuation">{</span>State<span class="token double-colon punctuation">::</span>NON_ACCEPT<span class="token punctuation">}</span><span class="token punctuation">;</span>

    vector<span class="token operator">&lt;</span>DFA_Node<span class="token operator">*</span><span class="token operator">&gt;</span> edges_<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> values_<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">,</span>DFA_Node<span class="token operator">*</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">DFA</span><span class="token punctuation">{</span>
    DFA_Node<span class="token operator">*</span> start_<span class="token punctuation">;</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>DFA_Node<span class="token operator">*</span><span class="token operator">&gt;</span> id_to_node_<span class="token punctuation">;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sub-set-construct-algorithm" tabindex="-1"><a class="header-anchor" href="#sub-set-construct-algorithm" aria-hidden="true">#</a> Sub-Set Construct Algorithm</h3>`,17),i=n("em",null,"Epsilon Closure",-1),u=n("br",null,null,-1),k={class:"MathJax",jax:"SVG",style:{position:"relative"}},r={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.919ex",height:"1ex",role:"img",focusable:"false",viewBox:"0 -431 406 442","aria-hidden":"true"},d=n("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[n("g",{"data-mml-node":"math"},[n("g",{"data-mml-node":"mi"},[n("path",{"data-c":"1D716",d:"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"})])])],-1),v=[d],m=n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"ϵ")])],-1),b=s(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token class-name">NFA</span><span class="token double-colon punctuation">::</span><span class="token function">epsilon_closure</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> st<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">auto</span> res <span class="token operator">=</span> st<span class="token punctuation">;</span>

      stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stk<span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> u <span class="token operator">:</span> st<span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token keyword">while</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">auto</span> t <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">auto</span> node <span class="token operator">=</span> id_to_node_<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>value_ <span class="token operator">==</span> NFA_Node<span class="token double-colon punctuation">::</span>EPSILON<span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge1_ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge1_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge1_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge1_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>

              <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge2_ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge2_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge2_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge2_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=s(`<li><p><em>Move</em><br> find all states can be arrived through <code>value</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token class-name">NFA</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">,</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> st<span class="token punctuation">)</span><span class="token punctuation">{</span>
      set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> u <span class="token operator">:</span> st<span class="token punctuation">)</span><span class="token punctuation">{</span>   
          <span class="token keyword">auto</span> node <span class="token operator">=</span> id_to_node_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>value_ <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge1_<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge1_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge2_<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>next_edge2_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),g=s(`<p>using the above operator, we can achieve sub-set construct algorithm</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>q0 &lt;- epsilon_closure(n0)
R &lt;- {q0}
Q &lt;- q0

while(Q is not empty){
    pop q from Q
    foreach c in character{
        t &lt;- epsilon_closure(move(q,c))
        D[q,c] &lt;- t
        if(t has not in Q)
            Q &lt;- t
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>DFA<span class="token operator">*</span> <span class="token class-name">NFA</span><span class="token double-colon punctuation">::</span><span class="token function">to_DFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    DFA<span class="token operator">*</span> dfa <span class="token operator">=</span> <span class="token keyword">new</span> DFA<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">Hash</span><span class="token punctuation">{</span>
        size_t  <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> st<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
            size_t ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> u <span class="token operator">:</span> st<span class="token punctuation">)</span> ret <span class="token operator">^=</span> hash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    unordered_map<span class="token operator">&lt;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span>Hash<span class="token operator">&gt;</span> set_to_id<span class="token punctuation">;</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> id_to_set<span class="token punctuation">;</span>

    <span class="token keyword">auto</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> st<span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;set{&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> u <span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> u <span class="token operator">&lt;&lt;</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;}\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
    <span class="token keyword">auto</span> q0 <span class="token operator">=</span> <span class="token function">epsilon_closure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>start_<span class="token operator">-&gt;</span>id_<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> DFA_Node<span class="token punctuation">{</span>id_<span class="token operator">:</span>idx<span class="token punctuation">}</span><span class="token punctuation">;</span>

    id_to_set<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> q0<span class="token punctuation">;</span>
    set_to_id<span class="token punctuation">[</span>q0<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span>

    unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> inq<span class="token punctuation">;</span>

    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    inq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">auto</span> tt <span class="token operator">=</span> <span class="token function">epsilon_closure</span><span class="token punctuation">(</span><span class="token function">move</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>id_to_set<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tt<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token comment">// out(tt); cout &lt;&lt; char(i) &lt;&lt; endl;</span>
            
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set_to_id<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                set_to_id<span class="token punctuation">[</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>
                id_to_set<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tt<span class="token punctuation">;</span>
                dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> DFA_Node<span class="token punctuation">{</span>id_<span class="token operator">:</span>idx<span class="token punctuation">}</span><span class="token punctuation">;</span>
                idx<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">auto</span> tt_id <span class="token operator">=</span> set_to_id<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// cout &lt;&lt; t &lt;&lt;&quot; -&gt; &quot; &lt;&lt; tt_id &lt;&lt; endl;</span>
            dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>tt_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>inq<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tt_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                inq<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tt_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span> <span class="token operator">:</span> set_to_id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>end_<span class="token operator">-&gt;</span>id_<span class="token punctuation">)</span><span class="token punctuation">)</span> dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">-&gt;</span>state_ <span class="token operator">=</span> DFA_Node<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>ACCEPT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    dfa<span class="token operator">-&gt;</span>start_ <span class="token operator">=</span> dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dfa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mini-dfa" tabindex="-1"><a class="header-anchor" href="#mini-dfa" aria-hidden="true">#</a> Mini-DFA</h2><h3 id="hopcroft-algorithm" tabindex="-1"><a class="header-anchor" href="#hopcroft-algorithm" aria-hidden="true">#</a> Hopcroft Algorithm</h3><ol><li>Initially we place the states of the (not necessarily minimal) DFA into two<br> equivalence classes: final states and nonfinal states.</li><li>We then repeatedly search for<br> an equivalence class X and an input symbol c such that when given c as input,<br> the states in X make transitions to states in k &gt; 1 different equivalence classes.<br> We then partition X into k classes in such a way that all states in a given new class<br> would move to a member of the same old class on c.</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">DFA</span><span class="token double-colon punctuation">::</span><span class="token function">_split</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> all_state<span class="token punctuation">,</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> cur_set<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// auto&amp; cur_set = all_state[index];</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur_set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> state_in_set<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> all_state<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> u <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>
            state_in_set<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// </span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> setId_to_state<span class="token punctuation">;</span>

    <span class="token keyword">bool</span> splited <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> st <span class="token operator">:</span> cur_set<span class="token punctuation">)</span><span class="token punctuation">{</span>

            <span class="token comment">// if no trans from \`st\` through \`i\` char, then add \`st\` to it&#39;s new set.</span>
            <span class="token keyword">bool</span> transed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">auto</span> nb <span class="token operator">:</span> id_to_node_<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">-&gt;</span>edges_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>id_to_node_<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">-&gt;</span>values_<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    setId_to_state<span class="token punctuation">[</span>state_in_set<span class="token punctuation">[</span>nb<span class="token operator">-&gt;</span>id_<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    transed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>transed<span class="token punctuation">)</span> setId_to_state<span class="token punctuation">[</span>state_in_set<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>setId_to_state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            all_state<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>all_state<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>all_state<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cur_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span> <span class="token operator">:</span> setId_to_state<span class="token punctuation">)</span><span class="token punctuation">{</span>
                all_state<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span> <span class="token operator">:</span> setId_to_state<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">_split</span><span class="token punctuation">(</span>all_state<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            splited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>splited<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

        setId_to_state<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>


DFA<span class="token operator">*</span> <span class="token class-name">DFA</span><span class="token double-colon punctuation">::</span><span class="token function">min_DFA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> accepted<span class="token punctuation">,</span>non_accepted<span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span> <span class="token operator">:</span> id_to_node_<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">-&gt;</span>state_ <span class="token operator">==</span> DFA_Node<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>ACCEPT<span class="token punctuation">)</span> accepted<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> non_accepted<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    vector<span class="token operator">&lt;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> all_state<span class="token punctuation">;</span>

    all_state<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>non_accepted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    all_state<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>accepted<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">_split</span><span class="token punctuation">(</span>all_state<span class="token punctuation">,</span>accepted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_split</span><span class="token punctuation">(</span>all_state<span class="token punctuation">,</span>non_accepted<span class="token punctuation">)</span><span class="token punctuation">;</span>

    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> state_in_set<span class="token punctuation">;</span>

    DFA<span class="token operator">*</span> dfa <span class="token operator">=</span> <span class="token keyword">new</span> DFA<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> all_state<span class="token punctuation">)</span><span class="token punctuation">{</span>
        dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> DFA_Node<span class="token punctuation">{</span>id_<span class="token operator">:</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> u <span class="token operator">:</span> s<span class="token punctuation">)</span>
            state_in_set<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">struct</span> <span class="token class-name">Hash</span><span class="token punctuation">{</span>

        size_t <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> pr<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> hash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span>pr<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">^</span> hash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span>pr<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// iterate all of new states</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> all_state<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// record added edges in case duplication</span>
        unordered_set<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>Hash<span class="token operator">&gt;</span> record_edge<span class="token punctuation">;</span> 
        <span class="token comment">// iterate all state in old dfa</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> u <span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>id_to_node_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-&gt;</span>state_ <span class="token operator">==</span> DFA_Node<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>ACCEPT<span class="token punctuation">)</span>
                dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>state_in_set<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>state_ <span class="token operator">=</span> DFA_Node<span class="token double-colon punctuation">::</span>State<span class="token double-colon punctuation">::</span>ACCEPT<span class="token punctuation">;</span>
            <span class="token comment">// iterate all edges of node</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">auto</span> nb <span class="token operator">:</span> id_to_node_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-&gt;</span>edges_<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// remove duplication</span>
                <span class="token comment">// if the edge has not been record then add it </span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>record_edge<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span>state_in_set<span class="token punctuation">[</span>nb<span class="token operator">-&gt;</span>id_<span class="token punctuation">]</span><span class="token punctuation">,</span>id_to_node_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-&gt;</span>values_<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">add_edge</span><span class="token punctuation">(</span>id_to_node_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-&gt;</span>values_<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>state_in_set<span class="token punctuation">[</span>nb<span class="token operator">-&gt;</span>id_<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    record_edge<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>state_in_set<span class="token punctuation">[</span>nb<span class="token operator">-&gt;</span>id_<span class="token punctuation">]</span><span class="token punctuation">,</span>id_to_node_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-&gt;</span>values_<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    dfa<span class="token operator">-&gt;</span>start_ <span class="token operator">=</span> dfa<span class="token operator">-&gt;</span>id_to_node_<span class="token punctuation">[</span>state_in_set<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// reallocate id for every state for sequence</span>
    dfa<span class="token operator">-&gt;</span><span class="token function">alloc_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dfa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function h(w,f){return a(),t("div",null,[l,n("ul",null,[n("li",null,[n("p",null,[i,u,o(" find all states can be arrived through "),n("mjx-container",k,[(a(),t("svg",r,v)),m])]),b]),_]),g])}const A=p(c,[["render",h],["__file","lex.html.vue"]]);export{A as default};
