import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as t}from"./app-6f6f0afa.js";const r={},n=t(`<h2 id="chomsky-文法" tabindex="-1"><a class="header-anchor" href="#chomsky-文法" aria-hidden="true">#</a> CHOMSKY 文法</h2><h3 id="type-0" tabindex="-1"><a class="header-anchor" href="#type-0" aria-hidden="true">#</a> Type 0</h3><ul><li>可以从<strong>任意多</strong>个符号产生<strong>任意多</strong>个符号</li></ul><p><code>, N E -&gt; and N</code></p><h3 id="type-1" tabindex="-1"><a class="header-anchor" href="#type-1" aria-hidden="true">#</a> Type 1</h3><ul><li><p><em>monotonic</em></p><ul><li>左侧符号不多于右侧符号</li></ul></li><li><p><em>context-sensitive</em></p><ul><li>左侧仅有一个非终结符，并且替换后顺序不变</li><li><code>Name Comma Name End -&gt; Name and Name End</code> means \`Comma -&gt; and\`\`</li><li>context 不受影响</li></ul></li></ul><h3 id="type-2-context-free" tabindex="-1"><a class="header-anchor" href="#type-2-context-free" aria-hidden="true">#</a> Type 2(context-free)</h3><ul><li>左侧仅有一个非终结符</li></ul><h4 id="extended-cf-grammars" tabindex="-1"><a class="header-anchor" href="#extended-cf-grammars" aria-hidden="true">#</a> Extended CF grammars</h4><ul><li><code>Sequence -&gt; Something | Something Sequence</code> 可以写为 <code>Something^+</code></li><li><code>Something^?</code> zero or one Something</li></ul><p><strong>Book grammar</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Book -&gt; Preface Chapter^+ Conclusion
Preface -&gt; &quot;PREFACE&quot; Paragraph+
Chapter -&gt; &quot;CHAPTER&quot; Number Paragraph^+
Paragraph -&gt; Sentence^+
Sentence -&gt; ...
Conclusion -&gt; &quot;CONCLUSION&quot; Paragraph^+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="type-3-regular-grammars-re" tabindex="-1"><a class="header-anchor" href="#type-3-regular-grammars-re" aria-hidden="true">#</a> Type 3 (regular grammars,RE)</h3><ul><li><p>右侧只能包含一个非终结符，且该非终结符在最后</p></li><li><p>仅包含两个规则</p><ul><li>一个非终结符产生一个终结符</li><li>一个非终结符产生一个终结符并接一个非终结符</li></ul></li><li><p>e.g.</p><ul><li>&amp; == and</li><li><code>Sentence -&gt; t | d | h | List</code></li><li><code>List -&gt; t ListTail | d ListTail | h ListTai</code></li><li><code>ListTail -&gt; , List | &amp;t | &amp;d | &amp;h</code></li><li>可以简化为 <code>S -&gt; (([tdh],)*[tdh]&amp;)?[tdh]</code></li></ul></li></ul><h3 id="type-4-finite-choice" tabindex="-1"><a class="header-anchor" href="#type-4-finite-choice" aria-hidden="true">#</a> Type 4(finite-choice)</h3><ul><li>右边不包含非终结符</li></ul>`,16),l=[n];function d(o,c){return a(),i("div",null,l)}const m=e(r,[["render",d],["__file","parsing.html.vue"]]);export{m as default};
