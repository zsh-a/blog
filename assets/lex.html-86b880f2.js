const e=JSON.parse(`{"key":"v-50a52fe2","path":"/posts/lex.html","title":"lexcial","lang":"zh-CN","frontmatter":{"title":"lexcial","tag":["compiler","regex","NFA","DFA"],"description":"Regex to NFA Thompson's Algorithm Using the above basic elements, we can construct NFA recursively. Data Struct struct NFA_Node{ NFA_Node* next_edge1_{nullptr},*next_edge2_{nullptr}; // every node only have at most two edge in Thompson's Algorithm // char value_{0}; // 1 : accepted state // 0 : non-accepted state // State state_{}; int id_ = -1; void add_edge(NFA_Node* to); };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/lex.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"lexcial"}],["meta",{"property":"og:description","content":"Regex to NFA Thompson's Algorithm Using the above basic elements, we can construct NFA recursively. Data Struct struct NFA_Node{ NFA_Node* next_edge1_{nullptr},*next_edge2_{nullptr}; // every node only have at most two edge in Thompson's Algorithm // char value_{0}; // 1 : accepted state // 0 : non-accepted state // State state_{}; int id_ = -1; void add_edge(NFA_Node* to); };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-27T16:51:03.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:tag","content":"compiler"}],["meta",{"property":"article:tag","content":"regex"}],["meta",{"property":"article:tag","content":"NFA"}],["meta",{"property":"article:tag","content":"DFA"}],["meta",{"property":"article:modified_time","content":"2023-10-27T16:51:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lexcial\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-27T16:51:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Regex to NFA","slug":"regex-to-nfa","link":"#regex-to-nfa","children":[{"level":3,"title":"Thompson's Algorithm","slug":"thompson-s-algorithm","link":"#thompson-s-algorithm","children":[]},{"level":3,"title":"Data Struct","slug":"data-struct","link":"#data-struct","children":[]},{"level":3,"title":"Implement","slug":"implement","link":"#implement","children":[]}]},{"level":2,"title":"NFA to DFA","slug":"nfa-to-dfa","link":"#nfa-to-dfa","children":[{"level":3,"title":"Data Struct","slug":"data-struct-1","link":"#data-struct-1","children":[]},{"level":3,"title":"Sub-Set Construct Algorithm","slug":"sub-set-construct-algorithm","link":"#sub-set-construct-algorithm","children":[]}]},{"level":2,"title":"Mini-DFA","slug":"mini-dfa","link":"#mini-dfa","children":[{"level":3,"title":"Hopcroft Algorithm","slug":"hopcroft-algorithm","link":"#hopcroft-algorithm","children":[]}]}],"git":{"createdTime":1698425463000,"updatedTime":1698425463000,"contributors":[{"name":"zsh","email":"zsh-a@foxmail.com","commits":1}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"posts/lex.md","localizedDate":"2023年10月27日","excerpt":"<h2> Regex to NFA</h2>\\n<h3> Thompson's Algorithm</h3>\\n<figure><img src=\\"/image/reg.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>Using the above basic elements, we can construct NFA recursively.</p>\\n<h3> Data Struct</h3>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">NFA_Node</span><span class=\\"token punctuation\\">{</span>\\n\\n    NFA_Node<span class=\\"token operator\\">*</span> next_edge1_<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">*</span>next_edge2_<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// every node only have at most two edge in Thompson's Algorithm</span>\\n\\n    <span class=\\"token comment\\">// </span>\\n    <span class=\\"token keyword\\">char</span> value_<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 1 : accepted state</span>\\n    <span class=\\"token comment\\">// 0 : non-accepted state</span>\\n    <span class=\\"token comment\\">// State state_{}; </span>\\n    <span class=\\"token keyword\\">int</span> id_ <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">add_edge</span><span class=\\"token punctuation\\">(</span>NFA_Node<span class=\\"token operator\\">*</span> to<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
